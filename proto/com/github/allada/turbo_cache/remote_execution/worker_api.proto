// Copyright 2021 Nathan (Blaise) Bruer.  All rights reserved.

syntax = "proto3";

package com.github.allada.turbo_cache.remote_execution;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

/// This API describes how schedulers communicate with Worker nodes.
///
/// When a worker node comes online it must be pre-configured with the
/// endpoint of the scheduler it will register with. Once the worker
/// connects to the scheduler it must send a `RegisterSupportedProperties`
/// command to the scheduler. The scheduler will then use this information
/// to determine which jobs the worker can process.
service WorkerApi {
    /// Registers this worker and informs the scheduler what properties
    /// this worker supports. The response must be listened on the client
    /// side for updates from the server. The first item sent will always be
    /// a ConnectionResult, after that it is undefined.
    rpc ConnectWorker(SupportedProperties) returns (stream UpdateForWorker);

    /// Message used to let the scheduler know that it is still alive as
    /// well as check to see if the scheduler is still alive. The scheduler
    /// may close the connection if the worker has not sent any messages
    /// after some amount of time (configured in the scheduler's
    /// configuration).
    rpc KeepAlive(KeepAliveRequest) returns (google.protobuf.Empty);

    /// Informs the scheduler that the service is going offline and
    /// should stop issuing any new actions on this worker.
    ///
    /// The worker may stay connected even after sending this command
    /// and may even send an `ExecuteResult` after sending this command.
    /// It is up to the scheduler implementation to decide how to handle
    /// this case.
    ///
    /// Any job that was running on this instance likely needs to be
    /// executed again, but up to the scheduler on how or when to handle
    /// this case.
    rpc GoingAway(GoingAwayRequest) returns (google.protobuf.Empty);

    /// Informs the scheduler about the result of an execution request.
    rpc ExecutionResponse(ExecuteResult) returns (google.protobuf.Empty);
}

/// Request object for keep alive requests.
message KeepAliveRequest {
    /// ID of the worker making the request.
    string worker_id = 1;
    reserved 2; // NextId.
}

/// Request object for going away requests.
message GoingAwayRequest {
    /// ID of the worker making the request.
    string worker_id = 1;
    reserved 2; // NextId.
}

/// Represents the initial request sent to the scheduler informing the
/// scheduler about this worker's capabilities.
message SupportedProperties {
    /// The list of properties this worker can support. The exact
    /// implementation is driven by the configuration matrix between the
    /// worker and scheduler.
    ///
    /// The scheduler may reject this worker if any property keys that
    /// the scheduler is not configured to support, or may simply ignore
    /// the unsupported properties.
    ///
    /// The details on how to use this property can be found here:
    /// https://github.com/allada/turbo-cache/blob/c91f61edf182f2b64451fd48a5e63fa506a43aae/config/cas_server.rs
    repeated build.bazel.remote.execution.v2.Platform.Property properties = 1;
    reserved 2; // NextId.
}


/// The result of an ExecutionRequest.
message ExecuteResult {
  oneof response {
    /// Result of an execution request if there were not detectable internal errors.
    ExecuteFinishedResult result = 1;

    /// An internal error. This is only present when an internal error happened that
    /// was not recoverable. If the execution job failed but at no fault of the worker
    /// it should not use this field and should send the error via ExecuteFinishedResult.
    google.rpc.Status internal_error = 2;
  }
  reserved 3; // NextId.
}

/// Represents the result of an execution.
message ExecuteFinishedResult {
    /// ID of the worker making the request.
    string worker_id = 1;

    /// The original execution digest request for this response. The scheduler knows what it
    /// should be, but we do safety checks to ensure it really is the request we expected.
    build.bazel.remote.execution.v2.Digest action_digest = 2;

    /// The salt originally sent along with the StartExecute request. This salt is used
    /// as a seed for cases where the execution digest should never be cached or merged
    /// with other jobs. This salt is added to the hash function used to compute jobs that
    /// are running or cached.
    uint64 salt = 3;

    /// Result of the execution. See `build.bazel.remote.execution.v2.ExecuteResponse`
    /// for details.
    build.bazel.remote.execution.v2.ExecuteResponse execute_response = 4;
    reserved 5; // NextId.
}

/// Result sent back from the server when a node connects.
message ConnectionResult {
    /// The internal ID given to the newly connected node.
    string worker_id = 1;
    reserved 2; // NextId.
}

/// Communication from the scheduler to the worker.
message UpdateForWorker {
    oneof update {
        /// This will be sent only as the first item in the stream after the node
        /// has connected.
        ConnectionResult connection_result = 1;

        /// Message used to let the worker know that it is still alive as well
        /// as check to see if the worker is still alive. The worker
        /// may close the connection if the scheduler has not sent any messages
        /// after some amount of time (configured in the scheduler's
        /// configuration).
        google.protobuf.Empty keep_alive = 2;

        /// Informs the worker about some work it should begin performing the
        /// requested action.
        StartExecute start_action = 3;

        /// Informs the worker that it has been disconnected from the pool.
        /// The worker may discard any outstanding work that is being executed.
        google.protobuf.Empty disconnect = 4;
    }
    reserved 5; // NextId.
}

message StartExecute {
    /// The action information used to execute job.
    build.bazel.remote.execution.v2.ExecuteRequest execute_request = 1;

    /// See documentation in ExecuteFinishedResult::salt.
    uint64 salt = 2;
    reserved 3; // NextId.
}
