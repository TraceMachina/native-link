# This file is automatically generated from `tools/build_cargo_manifest.py`.
# Do not edit this file directly.

[profile.release]
lto = true
opt-level = 3

[workspace]
resolver = "2"
members = [
  "cargogen/ac_server",
  "cargogen/ac_server_test",
  "cargogen/ac_utils",
  "cargogen/action_messages",
  "cargogen/action_messages_test",
  "cargogen/async_fixed_buffer",
  "cargogen/async_fixed_buffer_test",
  "cargogen/buf_channel",
  "cargogen/buf_channel_test",
  "cargogen/bytestream_server",
  "cargogen/bytestream_server_test",
  "cargogen/cache_lookup_scheduler",
  "cargogen/cache_lookup_scheduler_test",
  "cargogen/capabilities_server",
  "cargogen/cas",
  "cargogen/cas_server",
  "cargogen/cas_server_test",
  "cargogen/common",
  "cargogen/compression_store",
  "cargogen/compression_store_test",
  "cargogen/config",
  "cargogen/dedup_store",
  "cargogen/dedup_store_test",
  "cargogen/default_scheduler_factory",
  "cargogen/default_store_factory",
  "cargogen/error",
  "cargogen/evicting_map",
  "cargogen/evicting_map_test",
  "cargogen/execution_server",
  "cargogen/fast_slow_store",
  "cargogen/fast_slow_store_test",
  "cargogen/fastcdc",
  "cargogen/fastcdc_test",
  "cargogen/filesystem_store",
  "cargogen/filesystem_store_test",
  "cargogen/fs",
  "cargogen/gen_protos_tool",
  "cargogen/grpc_scheduler",
  "cargogen/grpc_store",
  "cargogen/local_worker",
  "cargogen/local_worker_test",
  "cargogen/local_worker_test_utils",
  "cargogen/memory_store",
  "cargogen/memory_store_test",
  "cargogen/mock_running_actions_manager",
  "cargogen/mock_scheduler",
  "cargogen/mock_worker_api_client",
  "cargogen/platform_property_manager",
  "cargogen/prometheus_utils",
  "cargogen/property_modifier_scheduler",
  "cargogen/property_modifier_scheduler_test",
  "cargogen/proto",
  "cargogen/ref_store",
  "cargogen/ref_store_test",
  "cargogen/resource_info",
  "cargogen/resource_info_test",
  "cargogen/retry",
  "cargogen/retry_test",
  "cargogen/running_actions_manager",
  "cargogen/running_actions_manager_test",
  "cargogen/s3_store",
  "cargogen/s3_store_test",
  "cargogen/scheduler",
  "cargogen/scheduler_utils",
  "cargogen/serde_utils",
  "cargogen/simple_scheduler",
  "cargogen/simple_scheduler_test",
  "cargogen/size_partitioning_store",
  "cargogen/size_partitioning_store_test",
  "cargogen/store",
  "cargogen/traits",
  "cargogen/verify_store",
  "cargogen/verify_store_test",
  "cargogen/worker",
  "cargogen/worker_api_client_wrapper",
  "cargogen/worker_api_server",
  "cargogen/worker_api_server_test",
  "cargogen/worker_utils",
  "cargogen/write_counter",
  "cargogen/write_request_stream_wrapper",
]

[workspace.dependencies]
async-lock = "2.7.0"
async-trait = "0.1.71"
axum = "0.6.18"
bincode = "1.3.3"
blake3 = "1.4.1"
byteorder = "1.4.3"
bytes = "1.4.0"
clap = { version = "4.3.11", features = ["derive"] }
ctor = "0.2.3"
drop_guard = "0.3.0"
env_logger = "0.10.0"
filetime = "0.2.21"
fixed-buffer = "0.2.3"
futures = "0.3.28"
hashbrown = "0.14"
hex = "0.4.3"
http = "^0.2"
hyper = "0.14.27"
json5 = "0.4.1"
lazy_static = "1.4.0"
log = "0.4.19"
lru = "0.10.1"
lz4_flex = "0.11.1"
maplit = "1.0.2"
mock_instant = "0.3.1"
nix = "0.26.2"
parking_lot = "0.12.1"
pin-project-lite = "0.2.10"
pretty_assertions = "1.4.0"
prometheus-client = "0.21.2"
prost = "0.11.9"
prost-build = "0.11.9"
prost-types = "0.11.9"
rand = "0.8.5"
relative-path = "1.8.0"
rusoto_core = "0.48.0"
rusoto_mock = "=0.48.0"
rusoto_s3 = "0.48.0"
rusoto_signature = "0.48.0"
serde = "1.0.167"
sha2 = "0.10.7"
shellexpand = "3.1.0"
shlex = "1.1.0"
stdext = "0.3.1"
tokio = { version = "1.29.1", features = ["macros", "io-util", "fs", "rt-multi-thread", "parking_lot"] }
tokio-stream = { version = "0.1.14", features = ["fs", "sync"] }
tokio-util = { version = "0.7.8", features = ["io", "io-util", "codec"] }
tonic = { version = "0.9.2", features = ["gzip"] }
tonic-build = "0.9.2"
tower = "0.4.13"
uuid = { version = "1.4.0", features = ["v4"] }

# Local libraries.
ac_server = { path = "cargogen/ac_server" }
ac_server_test = { path = "cargogen/ac_server_test" }
ac_utils = { path = "cargogen/ac_utils" }
action_messages = { path = "cargogen/action_messages" }
action_messages_test = { path = "cargogen/action_messages_test" }
async_fixed_buffer = { path = "cargogen/async_fixed_buffer" }
async_fixed_buffer_test = { path = "cargogen/async_fixed_buffer_test" }
buf_channel = { path = "cargogen/buf_channel" }
buf_channel_test = { path = "cargogen/buf_channel_test" }
bytestream_server = { path = "cargogen/bytestream_server" }
bytestream_server_test = { path = "cargogen/bytestream_server_test" }
cache_lookup_scheduler = { path = "cargogen/cache_lookup_scheduler" }
cache_lookup_scheduler_test = { path = "cargogen/cache_lookup_scheduler_test" }
capabilities_server = { path = "cargogen/capabilities_server" }
cas = { path = "cargogen/cas" }
cas_server = { path = "cargogen/cas_server" }
cas_server_test = { path = "cargogen/cas_server_test" }
common = { path = "cargogen/common" }
compression_store = { path = "cargogen/compression_store" }
compression_store_test = { path = "cargogen/compression_store_test" }
config = { path = "cargogen/config" }
dedup_store = { path = "cargogen/dedup_store" }
dedup_store_test = { path = "cargogen/dedup_store_test" }
default_scheduler_factory = { path = "cargogen/default_scheduler_factory" }
default_store_factory = { path = "cargogen/default_store_factory" }
error = { path = "cargogen/error" }
evicting_map = { path = "cargogen/evicting_map" }
evicting_map_test = { path = "cargogen/evicting_map_test" }
execution_server = { path = "cargogen/execution_server" }
fast_slow_store = { path = "cargogen/fast_slow_store" }
fast_slow_store_test = { path = "cargogen/fast_slow_store_test" }
fastcdc = { path = "cargogen/fastcdc" }
fastcdc_test = { path = "cargogen/fastcdc_test" }
filesystem_store = { path = "cargogen/filesystem_store" }
filesystem_store_test = { path = "cargogen/filesystem_store_test" }
fs = { path = "cargogen/fs" }
gen_protos_tool = { path = "cargogen/gen_protos_tool" }
grpc_scheduler = { path = "cargogen/grpc_scheduler" }
grpc_store = { path = "cargogen/grpc_store" }
local_worker = { path = "cargogen/local_worker" }
local_worker_test = { path = "cargogen/local_worker_test" }
local_worker_test_utils = { path = "cargogen/local_worker_test_utils" }
memory_store = { path = "cargogen/memory_store" }
memory_store_test = { path = "cargogen/memory_store_test" }
mock_running_actions_manager = { path = "cargogen/mock_running_actions_manager" }
mock_scheduler = { path = "cargogen/mock_scheduler" }
mock_worker_api_client = { path = "cargogen/mock_worker_api_client" }
platform_property_manager = { path = "cargogen/platform_property_manager" }
prometheus_utils = { path = "cargogen/prometheus_utils" }
property_modifier_scheduler = { path = "cargogen/property_modifier_scheduler" }
property_modifier_scheduler_test = { path = "cargogen/property_modifier_scheduler_test" }
proto = { path = "cargogen/proto" }
ref_store = { path = "cargogen/ref_store" }
ref_store_test = { path = "cargogen/ref_store_test" }
resource_info = { path = "cargogen/resource_info" }
resource_info_test = { path = "cargogen/resource_info_test" }
retry = { path = "cargogen/retry" }
retry_test = { path = "cargogen/retry_test" }
running_actions_manager = { path = "cargogen/running_actions_manager" }
running_actions_manager_test = { path = "cargogen/running_actions_manager_test" }
s3_store = { path = "cargogen/s3_store" }
s3_store_test = { path = "cargogen/s3_store_test" }
scheduler = { path = "cargogen/scheduler" }
scheduler_utils = { path = "cargogen/scheduler_utils" }
serde_utils = { path = "cargogen/serde_utils" }
simple_scheduler = { path = "cargogen/simple_scheduler" }
simple_scheduler_test = { path = "cargogen/simple_scheduler_test" }
size_partitioning_store = { path = "cargogen/size_partitioning_store" }
size_partitioning_store_test = { path = "cargogen/size_partitioning_store_test" }
store = { path = "cargogen/store" }
traits = { path = "cargogen/traits" }
verify_store = { path = "cargogen/verify_store" }
verify_store_test = { path = "cargogen/verify_store_test" }
worker = { path = "cargogen/worker" }
worker_api_client_wrapper = { path = "cargogen/worker_api_client_wrapper" }
worker_api_server = { path = "cargogen/worker_api_server" }
worker_api_server_test = { path = "cargogen/worker_api_server_test" }
worker_utils = { path = "cargogen/worker_utils" }
write_counter = { path = "cargogen/write_counter" }
write_request_stream_wrapper = { path = "cargogen/write_request_stream_wrapper" }
