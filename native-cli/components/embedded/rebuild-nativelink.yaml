---
# This Task allows running something similar to this natively in K8s:
#
# docker run \
#   --cap-add SYS_ADMIN \
#   --net=host \
#   -v /nix:/mnt/nix:ro \
#   nixpkgs/nix-flakes:latest \
#     nix run \
#       --store 'unix:///mnt/nix/var/nix/daemon-socket/socket?root=/mnt' \
#       --option sandbox false \
#       -L .#image.copyTo \
#         docker://localhost:5001/nativelink:$(nix eval \
#             .#image.imageTag --raw)local \
#           -- \
#             --dest-tls-verify=false
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nix2container-copyto
  labels:
    app.kubernetes.io/versions: "0.1"
spec:
  description: >
    This task invokes a nix command.
  workspaces:
    - name: optional-src
      optional: true
      description: |
        The source repository to invoke from.
      mountPath: /mnt
      readOnly: true
    - name: nix-store
      description: |
        An workspace containing a nix store. Appended via a `--store` argument.
      readOnly: true
      mountPath: /workspace/nix-store/nix
  params:
    - name: flakeOutput
      type: string
      description: |
        The output of a Nix Flake. This output must refer to an image built with
        nix2container.

        See:
          - https://nixos.wiki/wiki/Flakes for more in formation on the Flake
            URL schema.
          - https://github.com/nlewo/nix2container for more information on the
            required builder for the flake outputs.

        Examples:
          - "/mnt/src_root#someoutput" for a flake output in the `output-src`
            directory.
          - "github:TraceMachina/nativelink#image" for the latest nativelink
            image.
          - "github:<user>/<repo>?ref=pull/<PR_NUMBER>/head#<PACKAGE>" to use
            an image from a pull request of a repository on GitHub.
    - name: imageNameOverride
      type: string
      description: |
        An optional override for the image name when pushing to the registry.

        By default the tag is derived from the flake output via
        `$(nix eval /mnt/src_root#<imageoutput>.imageName --raw)` making
        invocations reproducible. This reproducibility may be broken by
        overriding the name with some arbitrary value.
      default: ""
    - name: imageTagOverride
      type: string
      description: |
        An optional override for the image tag when pushing to the registry.

        By default the tag is derived from the flake output via
        `$(nix eval /mnt/src_root#<imageoutput>.imageTag --raw)` making
        invocations reproducible. This reproducibility may be broken by
        overriding this tag with some arbitrary value.

        Production deployments shouldn't make use of this value to ensure
        reproducibility and "roll-back-ability" of the corresponding pipelinerun.
      default: ""
    - name: registry
      type: string
      description: |
        The target registry.

        By default, attempts to push to "kind-registry:5000".
      default: "kind-registry:5000"
    - name: insecureDisableTlsVerify
      type: string
      description: |
        Whether to add `--dest-tls-verify=false` to the copy command.

        This should only be set when working with local registries.
      default: "false"
    - name: enableNixSandbox
      type: string
      description: |
        Boolean to configure the nix sandbox.

        In the default configuration this Task doesn't use the nix sandbox.
      default: "false"
  steps:
    - name: invoke
      image: nixpkgs/nix-flakes:latest
      env:
        - name: FLAKE_OUTPUT
          value: "$(params.flakeOutput)"
        - name: IMAGE_NAME_OVERRIDE
          value: "$(params.imageNameOverride)"
        - name: IMAGE_TAG_OVERRIDE
          value: "$(params.imageTagOverride)"
        - name: REGISTRY
          value: "$(params.registry)"
        - name: ENABLE_NIX_SANDBOX
          value: "$(params.enableNixSandbox)"
        - name: INSECURE_DISABLE_TLS_VERIFY
          value: "$(params.insecureDisableTlsVerify)"
      securityContext:
        capabilities:
          # TODO(aaronmondal): This is necessary to allow nix builds which make
          # use of containers. This is a security concern and should not be used
          # in production grade deployments. Find a better solution.
          add: ["SYS_ADMIN"]
      script: |
        #!/usr/bin/env sh

        if [ "$(workspaces.optional-src.bound)" = "true" ]; then
          cd "$(workspaces.optional-src.path)"
        fi

        IMAGE_NAME=${IMAGE_NAME_OVERRIDE:-$(nix eval \
          "${FLAKE_OUTPUT}".imageName --raw)}

        IMAGE_TAG=${IMAGE_TAG_OVERRIDE:-$(nix eval \
          "${FLAKE_OUTPUT}".imageTag --raw)}

        # Configuration for Nix.
        NIX_SOCKET="unix:///workspace/nix-store/nix/var/nix/daemon-socket/socket"
        NIX_ROOT="/workspace/nix-store"

        if [ "${INSECURE_DISABLE_TLS_VERIFY}" = "true" ]; then
          nix run \
            --store "${NIX_SOCKET}?root=${NIX_ROOT}" \
            --option sandbox "${ENABLE_NIX_SANDBOX}" \
            --print-build-logs \
            "${FLAKE_OUTPUT}".copyTo \
              docker://"${REGISTRY}"/"${IMAGE_NAME}":"${IMAGE_TAG}" \
                -- \
                  --dest-tls-verify=false
        else
          nix run \
            --store "${NIX_SOCKET}?root=${NIX_ROOT}" \
            --option sandbox "${ENABLE_NIX_SANDBOX}" \
            --print-build-logs \
            "${FLAKE_OUTPUT}".copyTo \
              docker://"${REGISTRY}"/"${IMAGE_NAME}":"${IMAGE_TAG}"
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: rebuild-nativelink
spec:
  description: >
    Rebuild the nativelink repository using a specified Nix command.
  params:
    - name: flakeOutput
      type: string
      description: |
        The output of a Nix Flake. This output must refer to an image built with
        nix2container.

        See:
          - https://nixos.wiki/wiki/Flakes for more in formation on the Flake
            URL schema.
          - https://github.com/nlewo/nix2container for more information on the
            required builder for the flake outputs.

        Examples:
          - "/mnt/src_root#someoutput" for a flake output in the `output-src`
            directory.
          - "github:TraceMachina/nativelink#image" for the latest nativelink
            image.
          - "github:<user>/<repo>?ref=pull/<PR_NUMBER>/head#<PACKAGE>" to use
            an image from a pull request of a repository on GitHub.
    - name: imageNameOverride
      type: string
      description: |
        An optional override for the image name when pushing to the registry.

        By default the tag is derived from the flake output via
        `$(nix eval /mnt/src_root#<imageoutput>.imageName --raw)` making
        invocations reproducible. This reproducibility may be broken by
        overriding the name with some arbitrary value.
      default: ""
    - name: imageTagOverride
      type: string
      description: |
        An optional override for the image tag when pushing to the registry.

        By default the tag is derived from the flake output via
        `$(nix eval /mnt/src_root#<imageoutput>.imageTag --raw)` making
        invocations reproducible. This reproducibility may be broken by
        overriding this tag with some arbitrary value.

        Production deployments shouldn't make use of this value to ensure
        reproducibility and "roll-back-ability" of the corresponding pipelinerun.
      default: ""
    - name: registry
      type: string
      description: |
        The target registry.

        By default, attempts to push to "kind-registry:5000".
      default: "kind-registry:5000"
    - name: insecureDisableTlsVerify
      type: string
      description: |
        Whether to add `--dest-tls-verify=false` to the copy command.

        This should only be set when working with local registries.
      default: "false"
    - name: enableNixSandbox
      type: string
      description: |
        Boolean to configure the nix sandbox.

        In the default configuration this Task doesn't use the nix sandbox.
      default: "false"
  workspaces:
    - name: optional-src
      optional: true
      description: |
        The source repository to invoke from.
    - name: nix-store
      description: |
        An workspace containing a nix store. Appended via a `--store` argument.
  tasks:
    - name: invoke-nix-command
      taskRef:
        name: nix2container-copyto
      workspaces:
        - name: optional-src
          workspace: optional-src
        - name: nix-store
          workspace: nix-store
      params:
        - name: flakeOutput
          value: "$(params.flakeOutput)"
        - name: imageNameOverride
          value: "$(params.imageNameOverride)"
        - name: imageTagOverride
          value: "$(params.imageTagOverride)"
        - name: registry
          value: "$(params.registry)"
        - name: insecureDisableTlsVerify
          value: "$(params.insecureDisableTlsVerify)"
        - name: enableNixSandbox
          value: "$(params.enableNixSandbox)"
