// Copyright 2022 The NativeLink Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is @generated by prost-build.
/// / Same as build.bazel.remote.execution.v2.BatchUpdateBlobsRequest,
/// / but without the data field, and add a `data_len` field.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateBlobsRequestOverride {
    #[prost(string, tag = "1")]
    pub instance_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<batch_update_blobs_request_override::Request>,
    #[prost(
        enumeration = "super::super::super::super::super::build::bazel::remote::execution::v2::digest_function::Value",
        tag = "5"
    )]
    pub digest_function: i32,
}
/// Nested message and enum types in `BatchUpdateBlobsRequestOverride`.
pub mod batch_update_blobs_request_override {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Request {
        #[prost(message, optional, tag = "1")]
        pub digest: ::core::option::Option<
            super::super::super::super::super::super::build::bazel::remote::execution::v2::Digest,
        >,
        #[prost(
            enumeration = "super::super::super::super::super::super::build::bazel::remote::execution::v2::compressor::Value",
            tag = "3"
        )]
        pub compressor: i32,
        /// Override/new field to track the length of the data.
        ///
        /// Using 15 to stay at 1 byte, but higher than 3.
        #[prost(uint64, tag = "15")]
        pub data_len: u64,
    }
}
/// / Same as build.bazel.remote.execution.v2.BatchReadBlobsResponse,
/// / but without the data field, and add a `data_len` field.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchReadBlobsResponseOverride {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<
        batch_read_blobs_response_override::Response,
    >,
}
/// Nested message and enum types in `BatchReadBlobsResponseOverride`.
pub mod batch_read_blobs_response_override {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Response {
        #[prost(message, optional, tag = "1")]
        pub digest: ::core::option::Option<
            super::super::super::super::super::super::build::bazel::remote::execution::v2::Digest,
        >,
        #[prost(
            enumeration = "super::super::super::super::super::super::build::bazel::remote::execution::v2::compressor::Value",
            tag = "4"
        )]
        pub compressor: i32,
        #[prost(message, optional, tag = "3")]
        pub status: ::core::option::Option<
            super::super::super::super::super::super::google::rpc::Status,
        >,
        /// Override/new field to track the length of the data.
        ///
        /// Using 15 to stay at 1 byte, but higher than 3.
        #[prost(uint64, tag = "15")]
        pub data_len: u64,
    }
}
/// / Same as google.bytestream.WriteRequest, but without the data field,
/// / and add a `data_len` field.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteRequestOverride {
    #[prost(string, tag = "1")]
    pub resource_name: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub write_offset: i64,
    #[prost(bool, tag = "3")]
    pub finish_write: bool,
    /// Override/new field to track the length of the data.
    ///
    /// Using 15 to stay at 1 byte, but higher than 3.
    #[prost(uint64, tag = "15")]
    pub data_len: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTreeStreamResponse {
    #[prost(oneof = "get_tree_stream_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<get_tree_stream_response::Response>,
}
/// Nested message and enum types in `GetTreeStreamResponse`.
pub mod get_tree_stream_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Success(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::GetTreeResponse,
        ),
        #[prost(message, tag = "2")]
        Error(super::super::super::super::super::super::google::rpc::Status),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadStreamResponse {
    #[prost(oneof = "read_stream_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<read_stream_response::Response>,
}
/// Nested message and enum types in `ReadStreamResponse`.
pub mod read_stream_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(uint64, tag = "1")]
        Success(u64),
        #[prost(message, tag = "2")]
        Error(super::super::super::super::super::super::google::rpc::Status),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteStreamRequest {
    #[prost(oneof = "write_stream_request::Response", tags = "1, 2")]
    pub response: ::core::option::Option<write_stream_request::Response>,
}
/// Nested message and enum types in `WriteStreamRequest`.
pub mod write_stream_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Success(super::WriteRequestOverride),
        #[prost(message, tag = "2")]
        Error(super::super::super::super::super::super::google::rpc::Status),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteStreamResponse {
    #[prost(oneof = "execute_stream_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<execute_stream_response::Response>,
}
/// Nested message and enum types in `ExecuteStreamResponse`.
pub mod execute_stream_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Success(
            super::super::super::super::super::super::google::longrunning::Operation,
        ),
        #[prost(message, tag = "2")]
        Error(super::super::super::super::super::super::google::rpc::Status),
    }
}
/// / Nativelink event that has occurred.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OriginEvent {
    /// / The version of this message.
    #[prost(uint32, tag = "1")]
    pub version: u32,
    /// / The event UUIDv6. This is a unique identifier for the event for the
    /// / server that generated the event.
    /// / Note: The timestamp of when the event occurred is encoded in the UUID.
    #[prost(string, tag = "2")]
    pub event_id: ::prost::alloc::string::String,
    /// / \[optional\] The parent event UUID. This is used to track the
    /// / parent event that generated this event. This is useful for
    /// / tracking the flow of events.
    #[prost(string, tag = "3")]
    pub parent_event_id: ::prost::alloc::string::String,
    /// / If the client is bazel, this is the meatadata that was sent with the
    /// / request. This is useful for tracking the flow of events.
    #[prost(message, optional, tag = "4")]
    pub bazel_request_metadata: ::core::option::Option<
        super::super::super::super::super::build::bazel::remote::execution::v2::RequestMetadata,
    >,
    /// / The identity header that generated the event. This will be populated with
    /// / the value of the specified by the `IdentityHeaderSpec::header_name`.
    #[prost(string, tag = "5")]
    pub identity: ::prost::alloc::string::String,
    /// / The event that occurred.
    #[prost(
        oneof = "origin_event::Event",
        tags = "16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55"
    )]
    pub event: ::core::option::Option<origin_event::Event>,
}
/// Nested message and enum types in `OriginEvent`.
pub mod origin_event {
    /// / The event that occurred.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "16")]
        GetCapabilitiesRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::GetCapabilitiesRequest,
        ),
        /// Note: GetCapabilitiesRequest currently cannot error.
        #[prost(message, tag = "17")]
        GetCapabilitiesResponse(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::ServerCapabilities,
        ),
        #[prost(message, tag = "18")]
        GetActionResultRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::GetActionResultRequest,
        ),
        #[prost(message, tag = "19")]
        GetActionResultResponse(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::ActionResult,
        ),
        #[prost(message, tag = "20")]
        GetActionResultError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "21")]
        UpdateActionResultRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::UpdateActionResultRequest,
        ),
        #[prost(message, tag = "22")]
        UpdateActionResultResponse(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::ActionResult,
        ),
        #[prost(message, tag = "23")]
        UpdateActionResultError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "24")]
        FindMissingBlobsRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::FindMissingBlobsRequest,
        ),
        #[prost(message, tag = "25")]
        FindMissingBlobsResponse(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::FindMissingBlobsResponse,
        ),
        #[prost(message, tag = "26")]
        FindMissingBlobsError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "27")]
        BatchReadBlobsRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::BatchReadBlobsRequest,
        ),
        #[prost(message, tag = "28")]
        BatchReadBlobsResponse(super::BatchReadBlobsResponseOverride),
        #[prost(message, tag = "29")]
        BatchReadBlobsError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "30")]
        BatchUpdateBlobsRequest(super::BatchUpdateBlobsRequestOverride),
        #[prost(message, tag = "31")]
        BatchUpdateBlobsResponse(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse,
        ),
        #[prost(message, tag = "32")]
        BatchUpdateBlobsError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "33")]
        GetTreeRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::GetTreeRequest,
        ),
        #[prost(message, tag = "34")]
        GetTreeResponse(()),
        #[prost(message, tag = "35")]
        GetTreeError(super::super::super::super::super::super::google::rpc::Status),
        #[prost(message, tag = "36")]
        GetTreeStreamResponse(super::GetTreeStreamResponse),
        #[prost(message, tag = "37")]
        ReadRequest(
            super::super::super::super::super::super::google::bytestream::ReadRequest,
        ),
        #[prost(message, tag = "38")]
        ReadResponse(()),
        #[prost(message, tag = "39")]
        ReadError(super::super::super::super::super::super::google::rpc::Status),
        #[prost(message, tag = "40")]
        ReadStreamResponse(super::ReadStreamResponse),
        #[prost(message, tag = "41")]
        WriteRequest(()),
        #[prost(message, tag = "42")]
        WriteResponse(
            super::super::super::super::super::super::google::bytestream::WriteResponse,
        ),
        #[prost(message, tag = "43")]
        WriteError(super::super::super::super::super::super::google::rpc::Status),
        #[prost(message, tag = "44")]
        WriteStreamRequest(super::WriteStreamRequest),
        #[prost(message, tag = "45")]
        QueryWriteStatusRequest(
            super::super::super::super::super::super::google::bytestream::QueryWriteStatusRequest,
        ),
        #[prost(message, tag = "46")]
        QueryWriteStatusResponse(
            super::super::super::super::super::super::google::bytestream::QueryWriteStatusResponse,
        ),
        #[prost(message, tag = "47")]
        QueryWriteStatusError(
            super::super::super::super::super::super::google::rpc::Status,
        ),
        #[prost(message, tag = "48")]
        ExecuteRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::ExecuteRequest,
        ),
        #[prost(message, tag = "49")]
        ExecuteResponse(()),
        #[prost(message, tag = "50")]
        ExecuteError(super::super::super::super::super::super::google::rpc::Status),
        #[prost(message, tag = "51")]
        ExecuteStreamResponse(super::ExecuteStreamResponse),
        #[prost(message, tag = "52")]
        WaitExecutionRequest(
            super::super::super::super::super::super::build::bazel::remote::execution::v2::WaitExecutionRequest,
        ),
        #[prost(message, tag = "53")]
        WaitExecutionResponse(()),
        #[prost(message, tag = "54")]
        WaitExecuteError(super::super::super::super::super::super::google::rpc::Status),
        #[prost(message, tag = "55")]
        WaitExecuteStreamResponse(super::ExecuteStreamResponse),
    }
}
/// / Batch of events that have occurred.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OriginEvents {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<OriginEvent>,
}
/// / Bep event that has occurred.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BepEvent {
    /// / The version of this message.
    #[prost(uint32, tag = "1")]
    pub version: u32,
    /// / The identity header that generated the event. This will be populated
    /// / with the header value keyed by the specified by the
    /// / `IdentityHeaderSpec::header_name`.
    #[prost(string, tag = "2")]
    pub identity: ::prost::alloc::string::String,
    /// / The event that occurred.
    #[prost(oneof = "bep_event::Event", tags = "3, 4")]
    pub event: ::core::option::Option<bep_event::Event>,
}
/// Nested message and enum types in `BepEvent`.
pub mod bep_event {
    /// / The event that occurred.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "3")]
        LifecycleEvent(
            super::super::super::super::super::super::google::devtools::build::v1::PublishLifecycleEventRequest,
        ),
        #[prost(message, tag = "4")]
        BuildToolEvent(
            super::super::super::super::super::super::google::devtools::build::v1::PublishBuildToolEventStreamRequest,
        ),
    }
}
