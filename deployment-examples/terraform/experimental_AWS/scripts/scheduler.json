{
  "stores": {
    "AC_S3_STORE": {
      "compression": {
        "compression_algorithm": {
          "lz4": {}
        },
        "backend": {
          "fast_slow": {
            "fast": {
              "memory": {
                "eviction_policy": {
                  "max_bytes": "${NATIVELINK_AC_CONTENT_LIMIT:-100000000}",
                }
              }
            },
            "slow": {
              // TODO(allada) This needs to be some kind of sharding store, because s3 has
              // a 5k requests/s per path limit. To get around this we just need to create
              // enough shards and point them to the same bucket/path but with some key
              // to distinguish each shard based on the key.
              "experimental_s3_store": {
                "region": "${NATIVELINK_AWS_REGION:-us-east-1}",
                "bucket": "${NATIVELINK_AWS_S3_CAS_BUCKET:-not_set}",
                "key_prefix": "ac/",
                "retry": {
                  "max_retries": 6,
                  "delay": 0.3,
                  "jitter": 0.5,
                },
                "additional_max_concurrent_requests": 10
              }
            }
          }
        }
      }
    },
    "CAS_S3_STORE": {
      "dedup": {
        "index_store": {
          "fast_slow": {
            "fast": {
              "memory": {
                "eviction_policy": {
                  "max_bytes": "${NATIVELINK_CAS_INDEX_CACHE_LIMIT:-100000000}",
                }
              }
            },
            "slow": {
              // TODO(allada) This needs to be some kind of sharding store, because s3 has
              // a 5k requests/s per path limit. To get around this we just need to create
              // enough shards and point them to the same bucket/path but with some key
              // to distinguish each shard based on the key.
              "experimental_s3_store": {
                "region": "${NATIVELINK_AWS_REGION:-us-east-1}",
                "bucket": "${NATIVELINK_AWS_S3_CAS_BUCKET:-not_set}",
                "key_prefix": "cas-index/",
                "retry": {
                  "max_retries": 6,
                  "delay": 0.3,
                  "jitter": 0.5,
                },
                "additional_max_concurrent_requests": 10
              }
            }
          }
        },
        "content_store": {
          "compression": {
            "compression_algorithm": {
              "lz4": {}
            },
            "backend": {
              "fast_slow": {
                "fast": {
                  // The scheduler should mostly only be downloading small proto messages
                  // that describe what is being executed. Large blobs should not be pulled
                  // in the scheduler.
                  "memory": {
                    "eviction_policy": {
                      "max_bytes": "${NATIVELINK_CAS_CONTENT_LIMIT:-1000000000}",
                    }
                  }
                },
                "slow": {
                  // TODO(allada) This needs to be some kind of sharding store, because s3 has
                  // a 5k requests/s per path limit. To get around this we just need to create
                  // enough shards and point them to the same bucket/path but with some key
                  // to distinguish each shard based on the key.
                  "experimental_s3_store": {
                    "region": "${NATIVELINK_AWS_REGION:-us-east-1}",
                    "bucket": "${NATIVELINK_AWS_S3_CAS_BUCKET:-not_set}",
                    "key_prefix": "cas/",
                    "retry": {
                      "max_retries": 6,
                      "delay": 0.3,
                      "jitter": 0.5,
                    },
                    "additional_max_concurrent_requests": 10
                  }
                }
              }
            }
          }
        }
      }
    },
  },
  "schedulers": {
    "MAIN_SCHEDULER": {
      "simple": {
        "supported_platform_properties": {
          "cpu_count": "minimum",
          "cpu_arch": "exact",
          "memory_kb": "minimum",
          "kernel_version": "exact",
          "OSFamily": "priority",
          "container-image": "priority"
        }
      }
    }
  },
  "servers": [{
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50052",
      }
    },
    "services": {
      "ac": {
        "main": {
          "ac_store": "AC_S3_STORE"
        }
      },
      "execution": {
        "main": {
          "cas_store": "CAS_S3_STORE",
          "scheduler": "MAIN_SCHEDULER",
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER",
          }
        }
      }
    }
  }, {
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50061",
      }
    },
    "services": {
      "experimental_prometheus": {
        "path": "/metrics"
      },
      // Note: This should be served on a different port, because it has
      // a different permission set than the other services.
      // In other words, this service is a backend api. The ones above
      // are a frontend api.
      "worker_api": {
        "scheduler": "MAIN_SCHEDULER",
      }
    },
    "health": {},
  }]
}
