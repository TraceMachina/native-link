{
  "stores": {
    "AC_STORE": {
      "fast_slow": {
        "fast": {
          "memory": {
            "eviction_policy": {
              "max_bytes": "${nativelink_AC_MEMORY_CONTENT_LIMIT:-100000000}"
            }
          }
        },
        "slow": {
          "compression": {
            "backend": {
              "experimental_s3_store": {
                "region": "${nativelink_AC_S3_BUCKET_REGION:-}",
                "bucket": "${nativelink_AC_S3_BUCKET:-}",
                "retry": {
                  "max_retries": 7,
                  "delay": 0.1,
                  "jitter": 0.5
                }
              }
            },
            "compression_algorithm": {
              "lz4": {}
            }
          }
        }
      }
    },
    "CAS_STORE": {
      "existence_cache": {
        "backend": {
          "fast_slow": {
            "fast": {
              // Only cache small CAS files in memory.
              "size_partitioning": {
                "size": 1048576, // 1mib.
                "lower_store": {
                  "memory": {
                    "eviction_policy": {
                      "max_bytes": "${nativelink_CAS_MEMORY_CONTENT_LIMIT:-100000000}"
                    }
                  }
                },
                "upper_store": {
                  "noop": {}
                }
              }
            },
            "slow": {
              "compression": {
                "backend": {
                  "experimental_s3_store": {
                    "region": "${nativelink_CAS_S3_BUCKET_REGION:-}",
                    "bucket": "${nativelink_CAS_S3_BUCKET:-}",
                    "retry": {
                      "max_retries": 7,
                      "delay": 0.1,
                      "jitter": 0.5
                    }
                  }
                },
                "compression_algorithm": {
                  "lz4": {}
                }
              }
            }
          }
        },
        "eviction_policy": {
          "max_seconds": 3600, // 1 hour.
          "max_count": 1000000
        }
      }
    }
  },
  "schedulers": {
    "MAIN_SCHEDULER": {
      "simple": {
        "supported_platform_properties": {
          "cpu_count": "minimum",
          "OSFamily": "priority",
          "container-image": "priority"
        }
      }
    }
  },
  "servers": [{
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50051",
        "tls": {
          "cert_file": "${nativelink_CERT_FILE:-}",
          "key_file": "${nativelink_KEY_FILE:-}"
        },
        "advanced_http": {
          "http2_keep_alive_interval": 10
        }
      }
    },
    "services": {
      "ac": {
        "main": {
          "ac_store": "AC_STORE"
        }
      },
      "execution": {
        "main": {
          "cas_store": "CAS_STORE",
          "scheduler": "MAIN_SCHEDULER"
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER"
          }
        }
      }
    }
  }, {
    // Non-public apis. We re-export the Scheduler services on a non-tls connection
    // for local services that don't need a load balancer.
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50052",
        "advanced_http": {
          "http2_keep_alive_interval": 10
        }
      }
    },
    "services": {
      "experimental_prometheus": {
        "path": "/metrics"
      },
      "ac": {
        "main": {
          "ac_store": "AC_STORE"
        }
      },
      "execution": {
        "main": {
          "cas_store": "CAS_STORE",
          "scheduler": "MAIN_SCHEDULER"
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER"
          }
        }
      }
    }
  }, {
    // Internal Worker endpoint.
    "listener": {
      "http": {
        "socket_address": "0.0.0.0:50061",
        "advanced_http": {
          "http2_keep_alive_interval": 10
        }
      }
    },
    "services": {
      // Note: This should be served on a different port, because it has
      // a different permission set than the other services.
      // In other words, this service is a backend api. The ones above
      // are a frontend api.
      "worker_api": {
        "scheduler": "MAIN_SCHEDULER"
      },
      "health": {},
    }
  }]
}
