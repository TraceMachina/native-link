[changelog]
# changelog header
header = """
<!-- vale off -->
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% macro commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | split(pat="\n") | first }} - ([{{ commit.id | truncate(length=7, end="") }}](<REPO>/commit/{{ commit.id }}))\
{% endmacro %}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
<!-- vale on -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/TraceMachina/nativelink" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "Breaking", group = "<!-- 0 -->❌️  Breaking Changes" },

  # Pull this in early but show it later in the changelog.
  { message = "docs", group = "<!-- 3 -->📚 Documentation" },
  { message = "document", group = "<!-- 3 -->📚 Documentation" },
  { message = "documentation", group = "<!-- 3 -->📚 Documentation" },

  { message = "Add", group = "<!-- 1 -->⛰️  Features" },
  { message = "Integrate", group = "<!-- 1 -->⛰️  Features" },
  { message = "Introduce", group = "<!-- 1 -->⛰️  Features" },

  { message = "Avoid", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Fix", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "Handle", group = "<!-- 2 -->🐛 Bug Fixes" },

  { message = "test", group = "<!-- 4 -->🧪 Testing" },

  { message = "Make", group = "<!-- 5 -->🛠️ Refactor" },
  { message = "Migrate", group = "<!-- 5 -->🛠️ Refactor" },
  { message = "Update", group = "<!-- 5 -->🛠️ Refactor" },
  { message = "Move", group = "<!-- 5 -->🛠️ Refactor" },
  { message = "Rename", group = "<!-- 5 -->🛠️ Refactor" },
  { message = "Separate", group = "<!-- 5 -->🛠️ Refactor" },

  { message = "Temporarily disable", group = "<!-- 6 -->⚙️ Miscellaneous" },
  { message = "Remove", group = "<!-- 6 -->⚙️ Miscellaneous" },
  { message = ".*", group = "<!-- 6 -->⚙️ Miscellaneous" },

  { message = "to [0-9.]+", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },
  { message = "Bumb+", group = "<!-- 7 -->⬆️ Bumps & Version Updates" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
