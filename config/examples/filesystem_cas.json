// This configuration will place objects in various folders in
// `/tmp/turbo_cache_data`. It will store all data on disk and
// allows for restarts of the underlying service. It is optimized
// so objects are compressed, deduplicated and uses some in-memory
// optimizations for certain hot paths.
{
  "stores": {
    "FS_CONTENT_STORE": {
      "compression": {
        "compression_algorithm": {
          "LZ4": {}
        },
        "backend": {
          "filesystem": {
            "content_path": "/tmp/turbo_cache_data/content_path-cas",
            "temp_path": "/tmp/turbo_cache_data/tmp_path-cas",
            "eviction_policy": {
              // 2gb.
              "max_bytes": 2000000000,
            }
          }
        }
      }
    },
    "CAS_MAIN_STORE": {
      "verify": {
        "backend": {
          // Because we are using a dedup store, we can bypass small objects
          // and put those objects directly into the content store without
          // having to be indexed. This greatly improves performance of serving
          // general build content, since many objects are quite small and by
          // putting this size distinguish store in place will prevent 1+ index
          // read/write per small object request.
          "size_partitioning": {
            "size": 262144, // 256k.
            "lower_store": {
              "ref_store": {
                "name": "FS_CONTENT_STORE"
              }
            },
            "upper_store": {
              "dedup": {
                "index_store": {
                  // Since our index store is queried so much, we use a fast_slow
                  // store so it will keep in memory objects that are accessed
                  // frequently before going to disk.
                  // Note: indexes are generally quite small, but accessed frequently.
                  "fast_slow": {
                    "fast": {
                      "memory": {
                        "eviction_policy": {
                          // 10mb.
                          "max_bytes": 10000000,
                        }
                      }
                    },
                    "slow": {
                      "filesystem": {
                        "content_path": "/tmp/turbo_cache_data/content_path-index",
                        "temp_path": "/tmp/turbo_cache_data/tmp_path-index",
                        "eviction_policy": {
                          // 500mb.
                          "max_bytes": 500000000,
                        }
                      }
                    }
                  }
                },
                "content_store": {
                  "ref_store": {
                    "name": "FS_CONTENT_STORE"
                  }
                }
              }
            }
          }
        },
        "verify_size": true,
        "verify_hash": true
      }
    },
    "AC_MAIN_STORE": {
      "filesystem": {
        "content_path": "/tmp/turbo_cache_data/content_path-ac",
        "temp_path": "/tmp/turbo_cache_data/tmp_path-ac",
        "eviction_policy": {
          // 500mb.
          "max_bytes": 500000000,
        }
      }
    }
  },
  "servers": [{
    "listen_address": "0.0.0.0:50051",
    "services": {
      "cas": {
        "main": {
          "cas_store": "CAS_MAIN_STORE"
        }
      },
      "ac": {
        "main": {
          "ac_store": "AC_MAIN_STORE"
        }
      },
      "capabilities": {
        "main": {},
      },
      "bytestream": {
        "cas_stores": {
          "main": "CAS_MAIN_STORE",
        },
        // According to https://github.com/grpc/grpc.github.io/issues/371 16KiB - 64KiB is optimal.
        "max_bytes_per_stream": 64000, // 64kb.
      }
    }
  }]
}
